def test_nested_bullets():
    """Test the nested bullet parsing with sample data"""
    sample_output = """
**Architecture of Pyramids**

- **Base**
  - Square or rectangular shape
  - Side length of the base often equal to the height
- **Slope**
  - Steep slope to ensure stability
  - Often around 51-54 degrees for ancient Egyptian pyramids
- **Apex**
  - Narrow, pointed top
  - Typically made of smoother stone for a more polished appearance
- **Construction Techniques**
  - Use of ramps and pulleys
  - Thousands of workers involved in the construction process
"""
    
    parsed = parse_llm_output_to_outline(sample_output)
    print("Parsed nested bullets:")
    pprint.pprint(parsed)
    
    # Test the structure
    section = list(parsed.keys())[0]
    print(f"\nSection: {section}")
    for point in parsed[section]:
        print(f"Level {point['level']}: {point['text']}")
        for subpoint in point['subpoints']:
            print(f"  Level {subpoint['level']}: {subpoint['text']}")


def create_presentation(outline, topic, theme_path, filename="presentation.pptx"):
    """Create a PowerPoint presentation using a .pptx theme file with nested bullets"""
    # Validate theme file
    if not theme_path.endswith(".pptx"):
        raise ValueError(f"❌ The theme file must be a .pptx presentation: {theme_path}")
    
    # Load the theme file
    if os.path.exists(theme_path):
        prs = Presentation(theme_path)
        print(f"🎨 Theme loaded: {theme_path}")
    else:
        raise FileNotFoundError(f"❌ Theme file not found: {theme_path}")
    
    # Title slide
    title_slide = prs.slides.add_slide(prs.slide_layouts[0])
    title = title_slide.shapes.title
    subtitle = title_slide.placeholders[1] if len(title_slide.placeholders) > 1 else None
    title.text = topic
    if subtitle:
        subtitle.text = "Created with AI Presentation Generator"
    
    # Content slides
    for section, points in outline.items():
        if not section.strip():
            continue
            
        slide = prs.slides.add_slide(prs.slide_layouts[1])
        title_shape = slide.shapes.title
        content_shape = slide.placeholders[1]
        
        title_shape.text = section
        
        if points and len(points) > 0:
            # Create text frame for bullet points
            text_frame = content_shape.text_frame
            text_frame.clear()  # Clear any existing text
            
            # Add nested bullet points
            def add_bullet_points(points_list, paragraph, level=0):
                for point in points_list:
                    if isinstance(point, dict):
                        # Add bullet point
                        p = paragraph if level == 0 else text_frame.add_paragraph()
                        p.text = point['text']
                        p.level = level
                        
                        # Add subpoints if they exist
                        if point['subpoints']:
                            add_bullet_points(point['subpoints'], p, level + 1)
                    else:
                        # Fallback for simple strings
                        p = text_frame.add_paragraph()
                        p.text = point
                        p.level = 0
            
            # Start adding bullet points
            add_bullet_points(points, None, 0)
    
    # Delete the first slide (if needed)
    xml_slides = prs.slides._sldIdLst
    first_slide_id = xml_slides[0]
    xml_slides.remove(first_slide_id)
    
    # Save the presentation
    prs.save(filename)
    print(f"✅ Presentation saved as: {filename}")
    return filename

if __name__ == "__main__":
    # Test the nested bullet parsing
    test_nested_bullets()
    
    # Generate presentation with nested bullets
    outline, topic = generate_outline()
    create_presentation(outline, topic, "themes/your_theme.pptx")